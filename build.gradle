buildscript {
    repositories {
        mavenCentral()
		maven {
			name = "gt"
			url = "https://gregtech.overminddl1.com/"
		}
		maven {
			name = "forge"
			url = "http://files.minecraftforge.net/maven"
		}
		maven {
			name = "OC repo"
			url = "http://maven.cil.li/"
		}
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
        classpath 'com.gregoriust.gregtech:gregtech_1.7.10:SNAPSHOT:dev'
    }
}

repositories {
	maven {
		name = "gt"
		url = "https://gregtech.overminddl1.com/"
	}
}

apply plugin: 'forge'

version = "1.0.0-a.43"
group= "com.kbi.qwertech" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "qwertech"

sourceCompatibility = 1.7
targetCompatibility = 1.7

minecraft {
    version = "1.7.10-10.13.4.1614-1.7.10"
    runDir = "eclipse"
}

dependencies {
    // you may put jars on which you depend on in ./libs
    // or you may define them like so..
    //compile "some.group:artifact:version:classifier"
    //compile "some.group:artifact:version"
      
    // real examples
    //compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    //compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // for more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html
	compile fileTree(dir: 'lib', include: '*.jar')
	//compile "li.cil.oc:OpenComputers:MC1.7.10-1.6.2.1078-dev:dev"
	//compile 'net.industrial-craft:industrialcraft-2:2.2.828-experimental:api'
	//compile group: 'com.gregoriust.gregtech', name: 'gregtech_1.7.10', version: '6.05.48', classifier: 'dev'
	compile "com.gregoriust.gregtech:gregtech_1.7.10:SNAPSHOT:dev"
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
		exclude 'thumbs.db'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
		exclude 'thumbs.db'
    }
}

def filteredSourceDir = file("${buildDir}/filtered") 

sourceSets {
	ahem {
		java {
			srcDirs = [file("${buildDir}/sources/java")]
			//include 'com/kbi/qwertech/**'
			exclude 'com/kbi/qwertech/QwerTech.java'
		}
	}
}


// copy the main sources and filter any '$version' occurences. 
task processVersion (type: Copy) { 
    from "build/sources/java/com/kbi/qwertech/QwerTech.java"
    into filteredSourceDir 
    expand 'version':project.version
} 

compileJava.dependsOn processVersion 

sourceSets {
    // This source set will contain all sources that we filter 
    filtered { 
        java { 
            srcDirs = [sourceSets.ahem.java, filteredSourceDir] 
        } 
    } 
} 

// tell the compileJava task to compile the filtered source 
compileJava.source = sourceSets.filtered.java 

task deobfJar(type: Jar, dependsOn: 'jar') {
    from "build/classes/main"
	from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
		exclude 'thumbs.db'
    }
    classifier "dev"
}

task sourceJar(type: Jar, dependsOn: 'sourceMainJava') {
    from "build/sources/java/com/kbi/qwertech/api"
    classifier "api"
}

artifacts {
    archives deobfJar
	archives sourceJar
}

idea { module { inheritOutputDirs = true } }
